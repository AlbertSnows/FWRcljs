["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","~:line",181,"~:column",7,"~:end-line",181,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^V",[["~$spec"]]]]],"~:doc","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",11,"~:method-params",["^V",[["^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"~:variadic?",false,"^Q",181,"~:ret-tag","~$any","^S",181,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns the spec as data"],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1407,"^R",19,"^S",1407,"^T",31,"~:skip-wiki",true,"^U",["^V",["^W",["^V",[["^M","~$pred","~$gfn"]]]]],"^Y","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",31,"^[",["^V",[["^M","^19","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1407,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha33063","^S",1407,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:"]]]]],"^Y","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",21,"^R",16,"^S",21,"^T",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",33,"^R",1,"^1>",true,"^Q",21,"^S",21,"~:tag","~$number","^Y","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",35,"^R",16,"^S",35,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",35,"^S",35,"^1@","^1A","^Y","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^=","~$cljs.spec.alpha/empty-coll","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",841,"^R",1,"^S",841,"^T",26,"~:private",true,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",841,"^R",16,"^S",841,"^T",26,"^1F",true],"^1@","~$cljs.core/IMap"],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",235,"^R",7,"^S",235,"^T",22,"^U",["^V",["^W",["^V",[["~$ed"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",22,"^[",["^V",[["^1I"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",235,"^13",["^6",["^14","~$clj-nil"]],"^S",235,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1I"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1159,"^R",8,"^S",1159,"^T",18,"^1F",true,"^U",["^V",["^W",["^V",[["^M","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/op-explain","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^M","~$p","^1M","^1N","^1O","^1P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1159,"^13",["^6",["~$cljs.core/IVector","^14","^1K"]],"^S",1159,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p","^1M","^1N","^1O","^1P"]]]]]],"~$Specize",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",131,"^R",14,"^S",131,"^T",21,"^Y",null,"~:protocol-symbol",true,"~:jsdoc",["^V",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^M"]]]]],"^1T",true,"^=","~$cljs.spec.alpha/Specize","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",21,"^R",1,"^Q",131,"^1V",["^ ","^1W",["^ ","^1X",[["~$_"],["~$_","^M"]]]],"~:info",null,"^S",131,"^1@","^14","~:impls",["^6",["~$cljs.spec.alpha/t_cljs$spec$alpha33060","~$cljs.spec.alpha/t_cljs$spec$alpha32846","~$cljs.spec.alpha/t_cljs$spec$alpha32832","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha33032","^1<","~$cljs.spec.alpha/t_cljs$spec$alpha32687","~$cljs.spec.alpha/t_cljs$spec$alpha32765","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha32774","~$cljs.spec.alpha/t_cljs$spec$alpha32751","~$cljs.core/PersistentHashSet","~$cljs.spec.alpha/t_cljs$spec$alpha32740","~$cljs.core/PersistentTreeSet","~$cljs.spec.alpha/t_cljs$spec$alpha33039","~$cljs.core/Symbol","~$cljs.spec.alpha/t_cljs$spec$alpha32858"]],"^Y",null,"^1U",["^V",["@interface"]]],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1044,"^R",19,"^S",1044,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["~$ks","~$ps","~$forms"]]]]],"^Y","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^2A","^2B","^2C"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1044,"^13","^14","^S",1044,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2A","^2B","^2C"]]]]],"^Y","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",656,"^R",8,"^S",656,"^T",18,"^1F",true,"^U",["^V",["^W",["^V",[["~$tag","~$ret"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/tagged-ret","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^2F","^2G"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",656,"^13","~$cljs.core/MapEntry","^S",656,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^2F","^2G"]]]]]],"~$->t_cljs$spec$alpha32687",["^ ","^N",null,"^O",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","^1Y","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^6",["^2N","^2O"]],"~:factory","~:positional","^U",["^V",["^W",["^V",[["~$keys->specnames","~$opt","~$req-un","~$opt-un","^1:","~$pred-exprs","~$keys-pred","~$argm","~$opt-keys","~$map__32685","~$req-specs","~$p__32684","~$req","~$id","~$req-keys","~$opt-specs","~$k->s","~$pred-forms","~$meta32688"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32687.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32687","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^2S","^2T","^2U","^2V","^1:","^2W","^2X","^2Y","^2Z","^2[","^30","^31","^32","^33","^34","^35","^36","^37","^38"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",5,"^12",false,"^2Q","^2R","^Q",430,"^13","^25","^15",19,"^16",true,"^U",["^V",["^W",["^V",[["^2S","^2T","^2U","^2V","^1:","^2W","^2X","^2Y","^2Z","^2[","^30","^31","^32","^33","^34","^35","^36","^37","^38"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32687."],"~$t_cljs$spec$alpha33032",["^ ","~:num-fields",3,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^24","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","~:type",true,"^2K",true,"^R",3,"^Q",1294,"~:record",false,"^1@","~$function","^2P",["^6",["^2N","^2O"]]],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",380,"^R",8,"^S",380,"^T",15,"^1F",true,"^U",["^V",["^W",["^V",[["^19","~$x"],["^19","~$x","^M"]]]]],"^Y","internal helper function that returns true when x is valid for spec.","~:top-fn",["^ ","^12",false,"^15",3,"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^11",["^V",[null,null]]]],"^1F",true,"^=","~$cljs.spec.alpha/pvalid?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",380,"^S",380,"^15",3,"^16",true,"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^Y","internal helper function that returns true when x is valid for spec."],"~$->t_cljs$spec$alpha32751",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^M","~$mmvar","~$retag","^1:","^33","~$predx","~$dval","^2F","~$meta32752"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32751.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32751","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^3C","^3D","^1:","^33","^3E","^3F","^2F","^3G"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",6,"^12",false,"^2Q","^2R","^Q",556,"^13","^29","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^M","^3C","^3D","^1:","^33","^3E","^3F","^2F","^3G"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32751."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",306,"^R",19,"^S",306,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["~$k","^M","^X"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",306,"^S",306,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",262,"^R",1,"^S",262,"^T",29,"^1>",true,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",262,"^R",16,"^S",262,"^T",29,"^1>",true]],"~$*runtime-asserts*",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1479,"^R",3,"^S",1479,"^T",20,"^1F",true,"^1>",true],"^1F",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^R",1,"^1>",true,"^Q",1477,"^S",1479,"^1@","~$boolean"],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1291,"^R",19,"^S",1291,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["~$re","^1:"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",34,"^[",["^V",[["^3Q","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1291,"^13","^24","^S",1291,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^3Q","^1:"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",813,"^R",19,"^S",813,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["^2C","~$preds","^1:"]]]]],"^Y","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",34,"^[",["^V",[["^2C","^3T","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",813,"^13","^21","^S",813,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1:"]]]]],"^Y","Do not call this directly, use 'merge'"],"~$->t_cljs$spec$alpha33060",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^X","~$meta33061"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33060.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33060","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^X","^3W"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",5,"^12",false,"^2Q","^2R","^Q",1391,"^13","^20","^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^3W"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33060."],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",219,"^R",7,"^S",219,"^T",20,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^X","^1M","^1N","^1O","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",219,"^13",["^6",["^1G","^1K"]],"^S",219,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1110,"^R",8,"^S",1110,"^T",15,"^1F",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/add-ret","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$p","~$r","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1110,"^13",["^6",[null,"^14"]],"^S",1110,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",738,"^R",8,"^S",738,"^T",25,"^1F",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1M","^1N","^1O","~$x"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/explain-pred-list","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",25,"^[",["^V",[["^2C","^3T","^1M","^1N","^1O","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",738,"^13",["^6",["^1R","^14","^1K"]],"^S",738,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1M","^1N","^1O","~$x"]]]]]],"~$MAX_INT",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",19,"^R",14,"^S",19,"^T",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",21,"~:const-expr",["^ ","~:op","^44","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1@","^1A"],"^R",1,"^44",true,"^Q",19,"^S",19,"^1@","^1A"],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1487,"^R",7,"^S",1487,"^T",20,"^U",["^V",["^W",["^V",[["~$flag"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^4>"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1487,"^S",1487,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^4>"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1042,"^R",8,"^S",1042,"^T",12,"^1F",true,"^U",["^V",["^W",["^V",[["~$p1","~$p2"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/alt2","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^4A","^4B"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1042,"^13",["^6",[null,"^14"]],"^S",1042,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^4A","^4B"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",417,"^R",8,"^S",417,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"^1F",true,"^=","~$cljs.spec.alpha/and-k-gen","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",417,"^13","^14","^S",417,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1495,"^R",7,"^S",1495,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1495,"^S",1495,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",123,"^R",7,"^S",123,"^T",13,"^U",["^V",["^W",["^V",[["~$f-n"]]]]]],"^=","~$cljs.spec.alpha/fn-sym","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^4I"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",123,"^13",["^6",["^14","^1K"]],"^S",123,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^4I"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1442,"^R",7,"^S",1442,"^T",21,"^U",["^V",["^W",["^V",[["~$start","~$end","~$inst"]]]]],"^Y","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",21,"^[",["^V",[["^4L","^4M","^4N"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1442,"^13","^3O","^S",1442,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4L","^4M","^4N"]]]]],"^Y","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^=","~$cljs.spec.alpha/registry-ref","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",47,"^R",1,"^S",47,"^T",32,"^1F",true,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",47,"^R",20,"^S",47,"^T",32,"^1F",true],"^1@","^14"],"~$accept?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",979,"^R",8,"^S",979,"^T",15,"^1F",true,"^U",["^V",["^W",["^V",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/accept?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$p__32907"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",979,"^13","^3O","^S",979,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4S",["^4T"]]]]]]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",749,"^R",19,"^S",749,"^T",32,"^18",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1:"]]]]],"^Y","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",32,"^[",["^V",[["^2C","^3T","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",749,"^13","^22","^S",749,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1:"]]]]],"^Y","Do not call this directly, use 'and'"],"~$accept",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",977,"^R",8,"^S",977,"^T",14,"^1F",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/accept","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",977,"^13","^1G","^S",977,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",351,"^R",8,"^S",351,"^T",20,"^1F",true,"^U",["^V",["^W",["^V",[["~$rmap","^33","^1M","~$k"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/recur-limit?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^50","^33","^1M","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",351,"^13","^3O","^S",351,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^50","^33","^1M","~$k"]]]]]],"~$->t_cljs$spec$alpha32832",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^2C","^3T","^1:","~$specs","~$cform","~$meta32833"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32832.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32832","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^2C","^3T","^1:","^53","^54","^55"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",5,"^12",false,"^2Q","^2R","^Q",780,"^13","^22","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1:","^53","^54","^55"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32832."],"~$describe*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",45,"^R",4,"^S",45,"^T",13,"~:protocol","^2M","^Y",null,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^58","^2M","^=","~$cljs.spec.alpha/describe*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",45,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",423,"^R",19,"^S",423,"^T",32,"^18",true,"^U",["^V",["^W",["^V",[[["^ ","^4S",["^2U","^2V","^2X","^2W","^2Z","^30","^32","^34","^35","^37","^2T","^1:"],"~:as","^2Y"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",32,"^[",["^V",[["^31"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",423,"^13","^25","^S",423,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4S",["^2U","^2V","^2X","^2W","^2Z","^30","^32","^34","^35","^37","^2T","^1:"],"^5;","^2Y"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",66,"^R",8,"^S",66,"^T",20,"^1F",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1F",true,"^=","~$cljs.spec.alpha/reg-resolve!","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",66,"^13",["^6",[null,"^14"]],"^S",66,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$->t_cljs$spec$alpha32858",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^M","~$max-count","~$check?","^1:","~$gen-max","~$map__32856","^19","~$cpred","~$conform-keys","~$kind-form","~$addcv","~$cfns","~$describe-form","~$p__32855","~$distinct","^X","~$kfn","~$gen-into","~$count","~$min-count","~$opts","~$kind","~$conform-all","~$conform-into","~$meta32859"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32858.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32858","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^5@","^5A","^1:","^5B","^5C","^19","^5D","^5E","^5F","^5G","^5H","^5I","^5J","^5K","^X","^5L","^5M","^5N","^5O","^5P","^5Q","^5R","^5S","^5T"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",6,"^12",false,"^2Q","^2R","^Q",881,"^13","^2?","^15",25,"^16",true,"^U",["^V",["^W",["^V",[["^M","^5@","^5A","^1:","^5B","^5C","^19","^5D","^5E","^5F","^5G","^5H","^5I","^5J","^5K","^X","^5L","^5M","^5N","^5O","^5P","^5Q","^5R","^5S","^5T"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32858."],"~$re-explain",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1265,"^R",8,"^S",1265,"^T",18,"^1F",true,"^U",["^V",["^W",["^V",[["^1M","^1N","^1O","^3Q","^1P"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/re-explain","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^1M","^1N","^1O","^3Q","^1P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1265,"^13",["^6",["^1R","^14","^1K"]],"^S",1265,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^1M","^1N","^1O","^3Q","^1P"]]]]]],"~$alts",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1041,"^R",8,"^S",1041,"^T",12,"^1F",true,"^U",["^V",["^W",["^V",[["~$&","^2B"]]]]],"^3@",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]]],"^1F",true,"^=","~$cljs.spec.alpha/alts","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^3@",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]],"^[",[["^V",["^2B"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^12",true,"^Q",1041,"^13","^14","^S",1041,"^15",0,"^16",true,"^U",["^V",[["~$&","^2B"]]]],"~$->t_cljs$spec$alpha32740",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^M","^19","^1:","~$cpred?","~$unc","~$meta32741"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32740.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32740","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^19","^1:","^5[","^60","^61"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",6,"^12",false,"^2Q","^2R","^Q",520,"^13","^2;","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^5[","^60","^61"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32740."],"~$with-name",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",85,"^R",8,"^S",85,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["^X","~$name"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/with-name","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["^X","^64"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",85,"^13",["^6",[null,"~$clj","^14","~$cljs.core/MetaFn","^1K"]],"^S",85,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^64"]]]]]],"~$explain",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",270,"^R",7,"^S",270,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",270,"^13","^14","^S",270,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",93,"^R",8,"^S",93,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/spec-name","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",93,"^13",["^6",[null,"^14","^1K"]],"^S",93,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",335,"^R",1,"^S",335,"^T",18,"~:declared",true,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",335,"^R",10,"^S",335,"^T",18,"^6>",true]],"~$->t_cljs$spec$alpha33063",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^M","^19","^1:","^X","~$meta33064"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33063.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33063","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^19","^1:","^X","^6@"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",5,"^12",false,"^2Q","^2R","^Q",1411,"^13","^1<","^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^X","^6@"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33063."],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",44,"^R",4,"^S",44,"^T",13,"^58","^2M","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1:"]]]]]],"^58","^2M","^=","~$cljs.spec.alpha/with-gen*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^X","^1:"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",44,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1:"]]]]],"^Y",null],"~$k-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",397,"^R",8,"^S",397,"^T",13,"^1F",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1F",true,"^=","~$cljs.spec.alpha/k-gen","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",397,"^13",["^6",["^14","^1K"]],"^S",397,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",659,"^R",19,"^S",659,"^T",31,"^18",true,"^U",["^V",["^W",["^V",[["^:","^2C","^3T","^1:"]]]]],"^Y","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",31,"^[",["^V",[["^:","^2C","^3T","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",659,"^13","^28","^S",659,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2C","^3T","^1:"]]]]],"^Y","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",159,"^R",8,"^S",159,"^T",15,"^1F",true,"^U",["^V",["^W",["^V",[["~$s"],["~$s","^M"]]]]],"^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]]],"^1F",true,"^=","~$cljs.spec.alpha/specize","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["~$s","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",159,"^S",159,"^15",2,"^16",true,"^U",["^V",[["~$s"],["~$s","^M"]]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",27,"^R",16,"^S",27,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",27,"^S",27,"^1@","^1A","^Y","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$t_cljs$spec$alpha32846",["^ ","^3;",4,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^21","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",3,"^Q",816,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$Spec",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",39,"^R",14,"^S",39,"^T",18,"^Y",null,"^1T",true,"^1U",["^V",["@interface"]],"^1V",["^ ","^1W",["^ ","~$conform*",[["^X","~$x"]],"~$unform*",[["^X","~$y"]],"~$explain*",[["^X","^1M","^1N","^1O","~$x"]],"~$gen*",[["^X","~$overrides","^1M","^50"]],"^6B",[["^X","^1:"]],"^57",[["^X"]]]]],"^1T",true,"^=","^2M","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^R",1,"^Q",39,"^1V",["^ ","^1W",["^ ","^6N",[["^X","~$x"]],"^6O",[["^X","~$y"]],"^6P",[["^X","^1M","^1N","^1O","~$x"]],"^6Q",[["^X","^6R","^1M","^50"]],"^6B",[["^X","^1:"]],"^57",[["^X"]]]],"^1Z",null,"^S",39,"^1@","^14","^1[",["^6",["^20","^21","^22","^24","^1<","^25","^26","^28","^29","^2;","^2=","^2?"]],"^Y",null,"^1U",["^V",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",174,"^R",7,"^S",174,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",174,"^13","^14","^S",174,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",371,"^R",7,"^S",371,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"],["^X","~$x","^M"]]]]],"^Y","Helper function that returns true when x is valid for spec.","^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",371,"^S",371,"^15",3,"^16",true,"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^Y","Helper function that returns true when x is valid for spec."],"~$t_cljs$spec$alpha32687",["^ ","^3;",19,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^25","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",5,"^Q",430,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"^F",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",293,"^R",7,"^S",293,"^T",10,"^U",["^V",["^W",["^V",[["^X"],["^X","^6R"]]]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["^X"],["^X","^6R"]]],"^U",["^V",[["^X"],["^X","^6R"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",10,"^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["^X"],["^X","^6R"]]],"^U",["^V",[["^X"],["^X","^6R"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X"],["^X","^6R"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",293,"^S",293,"^15",2,"^16",true,"^U",["^V",[["^X"],["^X","^6R"]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$t_cljs$spec$alpha33063",["^ ","^3;",5,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^1<","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",5,"^Q",1411,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1386,"^R",7,"^S",1386,"^T",20,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1386,"^13","^20","^S",1386,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^6O",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",41,"^R",4,"^S",41,"^T",11,"^58","^2M","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]]],"^58","^2M","^=","~$cljs.spec.alpha/unform*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",11,"^[",["^V",[["^X","~$y"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",41,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]],"^Y",null],"~$->sym",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",323,"^R",8,"^S",323,"^T",13,"^1F",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"^1F",true,"^=","~$cljs.spec.alpha/->sym","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",323,"^13",["^6",[null,"^14"]],"^S",323,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",187,"^R",7,"^S",187,"^T",13,"^U",["^V",["^W",["^V",[["^M"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",187,"^13",["^6",[null,"^14"]],"^S",187,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^M"]]]]]],"~$regex?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",80,"^R",7,"^S",80,"^T",13,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",80,"^13",["^6",[null,"^14"]],"^S",80,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",406,"^R",8,"^S",406,"^T",16,"^1F",true,"^U",["^V",["^W",["^V",[["~$s"],["^5O","~$s"]]]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s.","^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["^5O","~$s"]]],"^U",["^V",[["~$s"],["^5O","~$s"]]],"^11",["^V",[null,null]]]],"^1F",true,"^=","~$cljs.spec.alpha/or-k-gen","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",16,"^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["^5O","~$s"]]],"^U",["^V",[["~$s"],["^5O","~$s"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["^5O","~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",406,"^S",406,"^15",2,"^16",true,"^U",["^V",[["~$s"],["^5O","~$s"]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1449,"^R",7,"^S",1449,"^T",20,"^U",["^V",["^W",["^V",[["^4L","^4M","~$val"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^4L","^4M","^7:"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1449,"^13",["^6",["^3O","^14"]],"^S",1449,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4L","^4M","^7:"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$dt",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",358,"^R",8,"^S",358,"^T",10,"^1F",true,"^U",["^V",["^W",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]]]],"^3@",["^ ","^12",false,"^15",4,"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]],"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]],"^11",["^V",[null,null]]]],"^1F",true,"^=","~$cljs.spec.alpha/dt","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",10,"^3@",["^ ","^12",false,"^15",4,"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]],"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]],"^11",["^V",[null,null]]],"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",358,"^S",358,"^15",4,"^16",true,"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^5["]]]],"~$preturn",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1074,"^R",8,"^S",1074,"^T",15,"^1F",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/preturn","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1074,"^13",["^6",[null,"^14","^23","^2I","^1K"]],"^S",1074,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1252,"^R",8,"^S",1252,"^T",18,"^1F",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","~$xs","^5;","~$data"]]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/re-conform","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["~$p","~$p__33013"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1252,"^13",["^6",[null,"^14","^23","^2I","^1K"]],"^S",1252,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","^7A","^5;","^7B"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",74,"^R",7,"^S",74,"^T",12,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",74,"^13",["^6",[null,"^1K"]],"^S",74,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",318,"^R",7,"^S",318,"^T",15,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",318,"^13","^14","^S",318,"^15",0,"^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1010,"^R",19,"^S",1010,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1010,"^13",["^6",["^14","^1G","^1K"]],"^S",1010,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"~$deriv",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1123,"^R",8,"^S",1123,"^T",13,"^1F",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/deriv","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1123,"^13",["^6",[null,"^14","^1G","^1K"]],"^S",1123,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$t_cljs$spec$alpha33039",["^ ","^3;",9,"^2L",["^6",["^2M","^2N","^1Y","^2O","~$cljs.core/ILookup"]],"^=","^2=","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",5,"^Q",1343,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O","^7N"]]],"~$t_cljs$spec$alpha32858",["^ ","^3;",25,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^2?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",6,"^Q",881,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",49,"^R",8,"^S",49,"^T",20,"^1F",true,"^U",["^V",["^W",["^V",[["~$reg","~$k"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/deep-resolve","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^7Q","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",49,"^S",49,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^7Q","~$k"]]]]]],"~$->t_cljs$spec$alpha32846",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^2C","^3T","^1:","~$meta32847"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32846.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32846","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^2C","^3T","^1:","^7T"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",3,"^12",false,"^2Q","^2R","^Q",816,"^13","^21","^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1:","^7T"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32846."],"~$exercise",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1433,"^R",7,"^S",1433,"^T",15,"^U",["^V",["^W",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]],"^11",["^V",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]],"^11",["^V",[null,null,null]]],"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]],"^10",null,"^11",["^V",[null,null,null]],"^R",1,"^12",false,"^Q",1433,"^S",1433,"^15",3,"^16",true,"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6R"]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$explain-data",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",226,"^R",7,"^S",226,"^T",19,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",226,"^13",["^6",["^1G","^1K"]],"^S",226,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",594,"^R",19,"^S",594,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]]]],"^Y","Do not call this directly, use 'tuple'","^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]],"^U",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/tuple-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",29,"^3@",["^ ","^12",false,"^15",3,"^[",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]],"^U",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",594,"^S",594,"^15",3,"^16",true,"^U",["^V",[["^2C","^3T"],["^2C","^3T","^1:"]]],"^Y","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",544,"^R",19,"^S",544,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]]]],"^Y","Do not call this directly, use 'multi-spec'","^3@",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]],"^U",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/multi-spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",34,"^3@",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]],"^U",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",544,"^S",544,"^15",4,"^16",true,"^U",["^V",[["^M","^3C","^3D"],["^M","^3C","^3D","^1:"]]],"^Y","Do not call this directly, use 'multi-spec'"],"~$conform",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",168,"^R",7,"^S",168,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",168,"^13","^14","^S",168,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"~$->t_cljs$spec$alpha32765",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^2C","^3T","^1:","^53","~$cnt","~$meta32766"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32765.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32765","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^2C","^3T","^1:","^53","^85","^86"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",6,"^12",false,"^2Q","^2R","^Q",600,"^13","^26","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^3T","^1:","^53","^85","^86"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32765."],"^6Q",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",43,"^R",4,"^S",43,"^T",8,"^58","^2M","^Y",null,"^U",["^V",["^W",["^V",[["^X","^6R","^1M","^50"]]]]]],"^58","^2M","^=","~$cljs.spec.alpha/gen*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",8,"^[",["^V",[["^X","^6R","^1M","^50"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",43,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6R","^1M","^50"]]]]],"^Y",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1339,"^R",19,"^S",1339,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^1:"]]]]],"^Y","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",29,"^[",["^V",[["^8:","^8;","^8<","^8=","^8>","^8?","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1339,"^13","^2=","^S",1339,"^15",7,"^16",true,"^U",["^V",["^W",["^V",[["^8:","^8;","^8<","^8=","^8>","^8?","^1:"]]]]],"^Y","Do not call this directly, use 'fspec'"],"~$inck",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",355,"^R",8,"^S",355,"^T",12,"^1F",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/inck","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["~$m","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",355,"^13","^14","^S",355,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"~$->t_cljs$spec$alpha33032",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^3Q","^1:","~$meta33033"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33032.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33032","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^3Q","^1:","^8D"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",3,"^12",false,"^2Q","^2R","^Q",1294,"^13","^24","^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^3Q","^1:","^8D"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33032."],"~$*coll-check-limit*",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",31,"^R",16,"^S",31,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",31,"^S",31,"^1@","^1A","^Y","The number of items validated in a collection spec'ed with 'every'"],"~$t_cljs$spec$alpha32751",["^ ","^3;",9,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^29","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",6,"^Q",556,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$get-spec",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",330,"^R",7,"^S",330,"^T",15,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",330,"^13","^14","^S",330,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",282,"^R",8,"^S",282,"^T",14,"^1F",true,"^U",["^V",["^W",["^V",[["^X","^6R","^1M","^50","^M"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/gensub","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","^6R","^1M","^50","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",282,"^13","^14","^S",282,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6R","^1M","^50","^M"]]]]]],"~$t_cljs$spec$alpha32774",["^ ","^3;",9,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^28","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",5,"^Q",697,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$t_cljs$spec$alpha32765",["^ ","^3;",6,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^26","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",6,"^Q",600,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",116,"^R",8,"^S",116,"^T",16,"^1F",true,"^U",["^V",["^W",["^V",[["~$spec-or-k"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1F",true,"^=","~$cljs.spec.alpha/the-spec","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",16,"^[",["^V",[["^8P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",116,"^13",["^6",[null,"^66","^3O","^14","^67","^1K"]],"^S",116,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8P"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",793,"^R",8,"^S",793,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["~$x","^5L","~$kform","^5K","^5N","^5O","^5@","^1M","^1N","^1O"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/coll-prob","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$x","^5L","^8S","^5K","^5N","^5O","^5@","^1M","^1N","^1O"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",793,"^13",["^6",["^1R","^14","^1K"]],"^S",793,"^15",10,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^5L","^8S","^5K","^5N","^5O","^5@","^1M","^1N","^1O"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",843,"^R",19,"^S",843,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","~:into","^5I","~:cljs.spec.alpha/describe","^4S",["^5Q","~:cljs.spec.alpha/kind-form","^5N","^5@","^5O","^5K","^5B","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","^5E","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^5B",20],"^5;","^5P"],"^1:"]]]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'","^3@",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","^8V","^5I","^8W","^4S",["^5Q","^8X","^5N","^5@","^5O","^5K","^5B","^8Y","^8Z","^5E","^8["],"^90",["^ ","^5B",20],"^5;","^5P"],"^1:"]]],"^U",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","^8V","^5I","^8W","^4S",["^5Q","^8X","^5N","^5@","^5O","^5K","^5B","^8Y","^8Z","^5E","^8["],"^90",["^ ","^5B",20],"^5;","^5P"],"^1:"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/every-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",29,"^3@",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","^8V","^5I","^8W","^4S",["^5Q","^8X","^5N","^5@","^5O","^5K","^5B","^8Y","^8Z","^5E","^8["],"^90",["^ ","^5B",20],"^5;","^5P"],"^1:"]]],"^U",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","^8V","^5I","^8W","^4S",["^5Q","^8X","^5N","^5@","^5O","^5K","^5B","^8Y","^8Z","^5E","^8["],"^90",["^ ","^5B",20],"^5;","^5P"],"^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","^8V","^5I","^8W","^4S",["^5Q","^8X","^5N","^5@","^5O","^5K","^5B","^8Y","^8Z","^5E","^8["],"^90",["^ ","^5B",20],"^5;","^5P"],"^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",843,"^S",843,"^15",4,"^16",true,"^U",["^V",[["^M","^19","^5P"],["^M","^19",["^ ","^5S","^8V","^5I","^8W","^4S",["^5Q","^8X","^5N","^5@","^5O","^5K","^5B","^8Y","^8Z","^5E","^8["],"^90",["^ ","^5B",20],"^5;","^5P"],"^1:"]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$t_cljs$spec$alpha32740",["^ ","^3;",6,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^2;","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",6,"^Q",520,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1060,"^R",8,"^S",1060,"^T",19,"^1F",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/accept-nil?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1060,"^13",["^6",["^3O","^14","^1K"]],"^S",1060,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$->t_cljs$spec$alpha32774",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^2P",["^6",["^2N","^2O"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^:","^2C","^3T","^1:","^33","~$kps","^53","^54","~$meta32775"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32774.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha32774","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^:","^2C","^3T","^1:","^33","^96","^53","^54","^97"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",5,"^12",false,"^2Q","^2R","^Q",697,"^13","^28","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2C","^3T","^1:","^33","^96","^53","^54","^97"]]]]],"^2P",["^6",["^2N","^2O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha32774."],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",105,"^R",8,"^S",105,"^T",18,"^1F",true,"^U",["^V",["^W",["^V",[["^8P"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1F",true,"^=","~$cljs.spec.alpha/maybe-spec","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^8P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",105,"^13",["^6",[null,"^66","^3O","^14","^67","^1K"]],"^S",105,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8P"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",511,"^R",19,"^S",511,"^T",28,"^18",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]]]],"^Y","Do not call this directly, use 'spec'","^3@",["^ ","^12",false,"^15",5,"^[",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]],"^U",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/spec-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",28,"^3@",["^ ","^12",false,"^15",5,"^[",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]],"^U",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",511,"^S",511,"^15",5,"^16",true,"^U",["^V",[["^M","^19","^1:","^5["],["^M","^19","^1:","^5[","^60"]]],"^Y","Do not call this directly, use 'spec'"],"~$invalid?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",163,"^R",7,"^S",163,"^T",15,"^U",["^V",["^W",["^V",[["^2G"]]]]],"^Y","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["^2G"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",163,"^13","^3O","^S",163,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^2G"]]]]],"^Y","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1015,"^R",19,"^S",1015,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^3Q","~$re-form","^3T","^37"]]]]],"^Y","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^3Q","^9@","^3T","^37"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1015,"^13","^1G","^S",1015,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^3Q","^9@","^3T","^37"]]]]],"^Y","Do not call this directly, use '&'"],"~$pcat*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",982,"^R",8,"^S",982,"^T",13,"^1F",true,"^U",["^V",["^W",["^V",[[["~#cmap",[["^4A","~$&","~$pr","^5;","^2B"],"~:ps",["~$k1","~$&","~$kr","^5;","^2A"],"~:ks",["~$f1","~$&","~$fr","^5;","^2C"],"~:forms","^2G","~:ret","~$rep+","~:rep+"]]]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/pcat*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$p__32910"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",982,"^13",["^6",["^14","^1G","^1K"]],"^S",982,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^9C",[["^4A","~$&","^9D","^5;","^2B"],"^9E",["^9F","~$&","^9G","^5;","^2A"],"^9H",["^9I","~$&","^9J","^5;","^2C"],"^9K","^2G","^9L","^9M","^9N"]]]]]]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1029,"^R",8,"^S",1029,"^T",12,"^1F",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/alt*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^2B","^2A","^2C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1029,"^13",["^6",["^14","^1G","^1K"]],"^S",1029,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",994,"^R",19,"^S",994,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^2A","^2B","^2C"]]]]],"^Y","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^2A","^2B","^2C"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",994,"^13",["^6",["^14","^1G","^1K"]],"^S",994,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2A","^2B","^2C"]]]]],"^Y","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",337,"^R",8,"^S",337,"^T",25,"^1F",true,"^U",["^V",["^W",["^V",[["~$v","~$args"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/macroexpand-check","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",25,"^[",["^V",[["~$v","^9V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",337,"^13","^1K","^S",337,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$v","^9V"]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",55,"^R",8,"^S",55,"^T",19,"^1F",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1F",true,"^=","~$cljs.spec.alpha/reg-resolve","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",55,"^13",["^6",[null,"^14"]],"^S",55,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",275,"^R",7,"^S",275,"^T",18,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",275,"^13","^14","^S",275,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1474,"^R",3,"^S",1474,"^T",20,"^1>",true,"^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",20,"^R",1,"^1>",true,"^Q",1467,"^S",1474,"^1@","^3O","^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",211,"^R",7,"^S",211,"^T",15,"^U",["^V",["^W",["^V",[["^X","~$gen-fn"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["^X","^:3"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",211,"^13","^14","^S",211,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^:3"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^6N",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",40,"^R",4,"^S",40,"^T",12,"^58","^2M","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]]],"^58","^2M","^=","~$cljs.spec.alpha/conform*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",40,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y",null],"~$t_cljs$spec$alpha33060",["^ ","^3;",2,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^20","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",5,"^Q",1391,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1482,"^R",16,"^S",1482,"^T",30,"^1@","^3O","^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",30,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1482,"^13","^3O","^S",1482,"^15",0,"^1@","^3O","^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1052,"^R",8,"^S",1052,"^T",14,"^1F",true,"^U",["^V",["^W",["^V",[["^4A","~$pret"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/noret?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^4A","^::"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1052,"^13",["^6",["^3O","^14","^1K"]],"^S",1052,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^4A","^::"]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1006,"^R",19,"^S",1006,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1006,"^13",["^6",["^14","^1K"]],"^S",1006,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"~$->t_cljs$spec$alpha33039",["^ ","^N",null,"^O",["^ ","^2K",true,"^2L",["^6",["^2M","^2N","^1Y","^2O","^7N"]],"^2P",["^6",["^2N","^2O","^7N"]],"^2Q","^2R","^U",["^V",["^W",["^V",[["^8:","^8;","^8<","^8=","^8>","^8?","^1:","^53","~$meta33040"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33039.","^P",null],"^2L",["^6",["^2M","^2N","^1Y","^2O","^7N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33039","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^[",["^V",[["^8:","^8;","^8<","^8=","^8>","^8?","^1:","^53","^:?"]]],"^10",null,"^11",["^V",[null,null]],"^2K",true,"^R",5,"^12",false,"^2Q","^2R","^Q",1343,"^13","^2=","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^8:","^8;","^8<","^8=","^8>","^8?","^1:","^53","^:?"]]]]],"^2P",["^6",["^2N","^2O","^7N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33039."],"~$op-describe",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1143,"^R",8,"^S",1143,"^T",19,"^1F",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/op-describe","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1143,"^13",["^6",[null,"^66","^14","^1K"]],"^S",1143,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",206,"^R",7,"^S",206,"^T",15,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",206,"^13",["^6",[null,"^14"]],"^S",206,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",387,"^R",8,"^S",387,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["^M","^19","^1M","^1N","^1O","~$v"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/explain-1","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["^M","^19","^1M","^1N","^1O","~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",387,"^13",["^6",["^1R","^14"]],"^S",387,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1M","^1N","^1O","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",264,"^R",7,"^S",264,"^T",18,"^U",["^V",["^W",["^V",[["^1I"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^1I"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",264,"^13","^14","^S",264,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1I"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1214,"^R",8,"^S",1214,"^T",14,"^1F",true,"^U",["^V",["^W",["^V",[["~$p","^6R","^1M","^50","~$f"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/re-gen","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["~$p","^6R","^1M","^50","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1214,"^13",["^6",["^14","^1K"]],"^S",1214,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^6R","^1M","^50","~$f"]]]]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1020,"^R",8,"^S",1020,"^T",18,"^1F",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C","~$f"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/filter-alt","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^2B","^2A","^2C","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1020,"^13","^1R","^S",1020,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C","~$f"]]]]]],"~$and-preds",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",726,"^R",8,"^S",726,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["~$x","^3T","^2C"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/and-preds","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$x","^3T","^2C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",726,"^13",["^6",[null,"^23"]],"^S",726,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^3T","^2C"]]]]]],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1318,"^R",8,"^S",1318,"^T",19,"^1F",true,"^U",["^V",["^W",["^V",[["~$f","^53","^9V"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/call-valid?","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$f","^53","^9V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1318,"^13",["^6",["^3O","^14","^1K"]],"^S",1318,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^53","^9V"]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1089,"^R",8,"^S",1089,"^T",17,"^1F",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/op-unform","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1089,"^13",["^6",["^1R","^14"]],"^S",1089,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$rep*",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",999,"^R",8,"^S",999,"^T",12,"^1F",true,"^U",["^V",["^W",["^V",[["^4A","^4B","^2G","~$splice","^M"]]]]]],"^1F",true,"^=","~$cljs.spec.alpha/rep*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^4A","^4B","^2G","^:T","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",999,"^13",["^6",["^14","^1K"]],"^S",999,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^4A","^4B","^2G","^:T","^M"]]]]]],"^1X",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",132,"^R",4,"^S",132,"^T",12,"^58","^1Y","^Y",null,"^U",["^V",["^W",["^V",[["~$_"],["~$_","^M"]]]]],"^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]]],"^58","^1Y","^=","~$cljs.spec.alpha/specize*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^3@",["^ ","^12",false,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$_"],["~$_","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",131,"^S",132,"^15",2,"^16",true,"^U",["^V",[["~$_"],["~$_","^M"]]],"^Y",null],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1048,"^R",19,"^S",1048,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",29,"^[",["^V",[["~$p","^M"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1048,"^13","^14","^S",1048,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"~$t_cljs$spec$alpha32832",["^ ","^3;",6,"^2L",["^6",["^2M","^2N","^1Y","^2O"]],"^=","^22","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^3<",true,"^2K",true,"^R",5,"^Q",780,"^3=",false,"^1@","^3>","^2P",["^6",["^2N","^2O"]]],"~$pcat",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",992,"^R",8,"^S",992,"^T",12,"^1F",true,"^U",["^V",["^W",["^V",[["~$&","^2B"]]]]],"^3@",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]]],"^1F",true,"^=","~$cljs.spec.alpha/pcat","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^3@",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]],"^[",[["^V",["^2B"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^12",true,"^Q",992,"^13","^14","^S",992,"^15",0,"^16",true,"^U",["^V",[["~$&","^2B"]]]],"^6P",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",42,"^R",4,"^S",42,"^T",12,"^58","^2M","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]]],"^58","^2M","^=","~$cljs.spec.alpha/explain*","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^X","^1M","^1N","^1O","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",42,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]],"^Y",null],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^P","c:\\Users\\SavyBlizzard\\Programming\\clojurescript\\Projects\\fw-r-cljs-v3\\.cljs_node_repl\\cljs\\spec\\alpha.cljs","^Q",1329,"^R",8,"^S",1329,"^T",19,"^1F",true,"^U",["^V",["^W",["^V",[["~$f","^53","~$iters"]]]]],"^Y","returns f if valid, else smallest"],"^1F",true,"^=","~$cljs.spec.alpha/validate-fn","^P",".cljs_node_repl\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$f","^53","^;2"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1329,"^13",["^6",[null,"^14"]],"^S",1329,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^53","^;2"]]]]],"^Y","returns f if valid, else smallest"]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^V",["~$cljs.spec.alpha/conformer",["^V",["~$fn*",["~$p1__33054#"],["^V",["~$cljs.core/zipmap",["^V",["~$cljs.core/map","~:cljs.spec.alpha/k","^;8"]],["^V",["^;:","~:cljs.spec.alpha/v","^;8"]]]]]],["^V",["^;7",["~$p1__33055#"],["^V",["^;:",["^V",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;;","~$k","^;<","~$v"]]],"^;="]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^M","^2F","^5@","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^60","~$cljs.spec.alpha/+","~:p2","^9L","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","~:pred-exprs","^8V","~:keys-pred","~:gen-max","~:shrunk","~:fn","~$cljs.spec.alpha/alt","~$cljs.core/vector?","^3E","^9N","~$cljs.core/=","~:opt-keys","^8;","^2S","~:cljs.spec.alpha/rep","~:pred","^3F","~:splice","^5A","^2C","^2T","~:cljs.spec.alpha/accept","^8:","^5T","~:else","^9H","~$cljs.core/count","~$cljs.spec.alpha/and","^2U","^2V","~$cljs.spec.alpha/cat","^8D","~:_","^8X","^3W","~:maybe","~:via","~$cljs.spec.alpha/every","~:req-specs","~$cljs.spec.alpha/or","^1:","~:cljs.spec.alpha/gfn","^5B","^8>","~$v","~:cljs.spec.alpha/spec","^2W","^;8","~:conform-keys","^5C","^6@","^2X","^5[","~$cljs.spec.alpha/fspec","^2Y","~$fn","~:amp","^48","^8?","^4T","~$cljs.spec.alpha/nilable","^2Z","^;<","~$cljs.spec.alpha/tuple","^19","^:?","~$cljs.core/map?","^8Z","~:p1","^86","^;9","~:cljs.spec.alpha/problems","^5D","~$%","^61","^;:","^;5","~$method","~:distinct","^2[","^30","^8","~$cljs.spec.alpha/keys","^3Q","^5E","^3G","^96","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^3T","^5F","~:req","^5G","^97","^5H","~$nil?","~:assertion-failed","^;7","~$cljs.core/<=","^6[","^38","~:cljs.spec.alpha/amp","~:id","^5I","~:min-count","^;=","~:kind","~:smallest","~$cljs.core/set?","~:count","^85","^5J","~$cljs.core/nil?","^3C","~:req-keys","^3D","~$k","^;;","^;>","~$cljs.core/list?","^5K","^31","^8<","~:opt-specs","~:cljs.spec.alpha/args","^8=","~$ifn?","~:pred-forms","^32","^X","^:","~$distinct?","~:max-count","^5L","^8Y","~:max-elements","^5M","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^33","^7T","~:num-elements","^53","^5N","^34","~$apply","^5O","^5P","^5Q","^54","~:min-elements","^35","^5R","^8[","~:cljs.spec.alpha/alt","~$cljs.core/or","^9K","~:cljs.spec.alpha/pred","^;","~:cljs.spec.alpha/nil","^9E","^36","^;6","~:in","^55","^8W","^5S","~:accept","~$cljs.spec.alpha/&","~:opt","~:cljs.spec.alpha/pcat","^37","~$cljs.spec.alpha/?"]],"~:order",["^4T","^;P","^;K","^<K","^<?","~~:_","^=C","^;V","^=?","^;>","^=;","^<W","^;L","^3Q","^8D","^;U","^<T","^;T","^=8","^=0","^<>","^8:","^8;","^8<","^8=","^8>","^8?","^:?","^;5","^;6","^;7","^;8","^;9","^;:","^;;","^;<","^;=","~$k","~$v","^6[","^3W","^=<","^<M","^<A","^6@","^;C","^<N"]],"^Y",null]